pipeline{
    agent any
    tools {
        maven 'maven-3.6.2'
        jdk 'jdk8'
    }
    options{
        timestamps()
        timeout(unit: 'MINUTES', time: 10)
        buildDiscarder(logRotator(
            numToKeepStr: '4',
            daysToKeepStr: '7',
            artifactNumToKeepStr: '30')
        )
    }
    stages{
        stage('calculate-release'){
            when { expression { env.GIT_BRANCH ==~ /release(.+)/ } }   
            steps {
                script {
                    sh "git fetch --tags || true"
                    
                    TAG=env.GIT_BRANCH.split('\\/') 
                    VERSION= TAG[1]
                    HIGHEST = sh(script: "git tag -l --sort=version:refname \"${VERSION}.*\" | tail -1", returnStdout: true).trim()
                    if (HIGHEST.isEmpty()) {
                        REG =".0"
                        NEW_TAG=VERSION+REG
                    } else {
                        NEW_TAG=HIGHEST.split('\\.')
                        NEW_TAG[2]=NEW_TAG[2].toInteger()+1
                        NEW_TAG=NEW_TAG.join('.')
                    }
                    sh "mvn versions:set -DnewVersion=${NEW_TAG}"
                    // sh "dependency:list"
                    sh "mvn versions:commit"
                }
            }
        } 
       stage('build'){
            steps {
                echo 'build'
                configFileProvider([configFile(fileId: 'settings', variable: 'MAVEN_SETTINGS_XML')]) {
                        sh "mvn -s $MAVEN_SETTINGS_XML clean compile"
                }
                echo '=================== End Build ======================='
            }
        }
        stage('test'){
            steps {
                echo '=================== Test ============================'
                configFileProvider([configFile(fileId: 'settings', variable: 'MAVEN_SETTINGS_XML')]) {
                        sh "mvn -s $MAVEN_SETTINGS_XML clean test"
                }
                echo '=================== End Test ========================'

            }
        }
        stage('package'){
            steps {
                echo '=================== Package ========================='
                configFileProvider([configFile(fileId: 'settings', variable: 'MAVEN_SETTINGS_XML')]) {
                        sh "mvn -s $MAVEN_SETTINGS_XML clean package"
                }
                echo '=================== End Package ====================='
                script{
                    env.GIT_COMMIT_MSG = sh (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()
                    }
            }
        }
        stage('E2E'){
            when { expression {env.GIT_BRANCH == 'master' || (env.GIT_BRANCH ==~ /feature(.+)/ && env.GIT_COMMIT_MSG == 'e2e') }}
            steps{
                echo 'E2E Test!'
                script {
                         configFileProvider([configFile(fileId: 'settings', variable: 'MAVEN_SETTINGS')]){
                            sh "mvn -s $MAVEN_SETTINGS dependency:get -DrepoUrl=http://artifactory:8081/artifactory/libs-snapshot-local -Dartifact=com.lidar:simulator:99-SNAPSHOT:jar -Dtransitive=false -Ddest=simulator.jar"
                            sh "mvn -s $MAVEN_SETTINGS dependency:get -DrepoUrl=http://artifactory:8081/artifactory/libs-snapshot-local -Dartifact=com.lidar:analytics:99-SNAPSHOT:jar -Dtransitive=false -Ddest=analytics.jar"
                        }
                        sh "cp target/*.jar app.jar"
                        sh "java -cp app.jar:analytics.jar:simulator.jar com.lidar.simulation.Simulator"   
                }
                

            }
        }
        stage('publish'){
            when { expression {env.GIT_BRANCH == 'master' || env.GIT_BRANCH ==~ /release(.+)/}}
            steps {
                echo '=================== Publish ========================='
                configFileProvider([configFile(fileId: 'settings', variable: 'MAVEN_SETTINGS_XML')]) {
                        sh "mvn -s $MAVEN_SETTINGS_XML clean deploy -DskipTests"
                }
                echo '=================== End Publish ====================='

            }
        }
        stage('tag-release'){
            when { expression {env.GIT_BRANCH ==~ /release(.+)/ } }
            steps{
                sh "git clean -f"
                sh "git tag ${NEW_TAG}"
                withCredentials([gitUsernamePassword(credentialsId: 'gitLabUserPass',
                 gitToolName: 'git-tool')]) {
                   sh "git push --tags"
                }
            }
        } 
    }
    
    
    
    post{
        always {
            echo 'Post stage'
            deleteDir()
            
        }
        failure {
                mail bcc: '', body: 'Failure to deploy', cc: '', from: '', replyTo: '', subject: 'jenkins job', to: 'reemtest12@gmail.com'
            }
        success {
            mail bcc: '', body: 'Success to deploy', cc: '', from: '', replyTo: '', subject: 'jenkins job', to: 'reemtest12@gmail.com'
        }     
    }

}